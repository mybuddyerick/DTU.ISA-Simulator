# --- init registers ---
0: LI R9, 1;
1: LI R10, 2;
2: LI R3, 1;
3: LI R6, 0;
4: LD R1, R5;
5: ADD R2,R1,R0;

# --- 0 check ---
6: LI R8, 36;
7: JEQ R8, R1, R0;

# --- 1 check ---
8: LI R8, 28;
9: JEQ R8, R1, R9;

# --- even check ---
10: AND R6, R1, R9;
11: LI R8, 19;
12: JEQ R8, R6, R0;

# --- 3n+1 & jump ---
13: ADD R6, R1, R0;
14: ADD R1, R1, R1;
15: ADD R1, R1, R6;
16: ADD R1, R1, R9;
17: LI R8, 25;
18: JR R8;

# --- n/2 ---
19: LI R8, 21;
20: LI R6, 0;
21: SUB R1, R1, R10;
22: ADD R6, R6, R9;
23: JLT R8, R0, R1;
24: ADD R1, R1, R6;

# --- i++ & loop for next in sequence ---
25: ADD R3, R3, R9;
26: LI R8, 8;
27: JR R8;

# --- store if longest ---
28: LI R8, 33;
29: JLT R8, R3, R4;
30: ADD R4, R3, R0;
31: LI R8, 254;
32: SD R2, R8;
33: ADD R5, R5, R9;
34: LI R8, 2;
35: JR R8;
36: LI R8, 255;
37: SD R4, R8;
38: END;
